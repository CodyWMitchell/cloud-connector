apiVersion: v1
kind: Template
metadata:
  name: cloud-connector
objects:


# API
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: cloud-connector
      pod: cloud-connector-api
    name: cloud-connector-api
  spec:
    replicas: ${{REPLICAS_API}}
    selector:
      matchLabels:
        app: cloud-connector
        pod: cloud-connector-api
    template:
      metadata:
        labels:
          app: cloud-connector
          pod: cloud-connector-api
      spec:
        containers:
        - command:
          - ./connector_service
          - -mgmtAddr
          - :8080
          env: []
          image: ${IMAGE}:${IMAGE_TAG}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /live
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: cloud-connector-api
          ports:
          - containerPort: 9000
            name: metrics
            protocol: TCP
          - containerPort: 8000
            name: web
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 9000
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: ${CPU_LIMIT}
              memory: ${MEMORY_LIMIT}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - mountPath: /tmp/jwt_keys
              name: volume-mqtt-jwt-keys
              readOnly: true
        imagePullSecrets:
        - name: quay-cloudservices-pull
        volumes:
          - name: volume-mqtt-jwt-keys
            secret:
              defaultMode: 420
              secretName: cloud-connector-mqtt-credentials


- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: cloud-connector
      pod: cloud-connector-api
    name: cloud-connector
    annotations:
      prometheus.io/path: /metrics
      prometheus.io/port: "8000"
      prometheus.io/scrape: "true"
  spec:
    ports:
    - appProtocol: http
      name: public
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      pod: cloud-connector-api
    type: ClusterIP


# Database
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      description: Defines how to deploy the database
    labels:
      app: cloud-connector
    name: postgres
  spec:
    replicas: 1
    strategy:
      type: Recreate
    selector:
      matchLabels:
        name: postgres
    template:
      metadata:
        labels:
          app: cloud-connector
          name: postgres
      spec:
        containers:
        - env:
          - name: POSTGRES_USER
            valueFrom:
              secretKeyRef:
                key: db.user
                name: cloud-connector-db
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db.password
                name: cloud-connector-db
          - name: POSTGRES_DATABASE
            valueFrom:
              secretKeyRef:
                key: db.name
                name: cloud-connector-db
          - name: PGDATA
            value: /var/lib/postgresql/data/pgdata
          image: quay.io/debezium/postgres:12
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - psql
              - -w
              - -U
              - insights
              - -c
              - 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgres
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - psql
              - -w
              - -U
              - insights
              - -c
              - 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: postgres-data
        volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: cloud-connector
    name: postgres-data
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${DB_VOLUME_CAPACITY}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: cloud-connector
    name: postgres
  spec:
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgres
    type: ClusterIP

parameters:
- name: IMAGE_TAG
  required: true
- name: IMAGE
  value: quay.io/cloudservices/cloud-connector

- name: LOG_LEVEL
  value: DEBUG
- name: CPU_LIMIT
  value: 500m
- name: MEMORY_LIMIT
  value: 512Mi

- name: REPLICAS_API
  value: "1"

- name: DB_VOLUME_CAPACITY
  value: 5Gi
- name: DB_SSLMODE
  value: prefer

- name: KAFKA_BOOTSTRAP_HOST
  required: true
  value: platform-mq-ci-kafka-bootstrap.platform-mq-ci.svc:9092
- name: INVENTORY_KAFKA_TOPIC
  required: true
  value: platform.inventory.host-ingress-p1

- name: MQTT_BROKER_ADDRESS
  required: true
  value: wss://FIXME.connect.cloud.stage.redhat.com:443
- name: MQTT_TOPIC_PREFIX
  required: true
  value: redhat

- name: AUTH_GATEWAY_URL
  required: true
  value: "http://apicast.3scale-staging.svc.cluster.local:8890/internal/certauth"
